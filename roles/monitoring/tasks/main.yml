---
- name: Generate Client Secret
  shell: cat /proc/sys/kernel/random/uuid | sed 's/-//g'
  register: client_secret
- debug: msg="{{ client_secret.stdout }}"
- name: Generate proxy client
  community.general.keycloak_client:
    state: present
    auth_client_id: admin-cli
    auth_keycloak_url: "https://auth.{{ domain }}/auth"
    auth_username: "{{ keycloak_user }}"
    auth_password: "{{ keycloak_password }}"
    auth_realm: master
    name: Monitoring Proxy
    client_id: monitoring-proxy
    client_authenticator_type: client-secret
    secret: "{{ client_secret.stdout }}"
    realm: hausnet
    protocol_mappers:
      - name: "monitoring-group-mapper"
        protocol: "openid-connect"
        protocolMapper: "oidc-group-membership-mapper"
        config: 
          id.token.claim: "true"
          access.token.claim: "true"
          claim.name: "groups"
          userinfo.token.claim: "true"
          full.path: "true"
      - config:
          included.client.audience: "monitoring-proxy"
          id.token.claim: "true"
          access.token.claim: "true"
        name: monitoring-proxy-mapper
        protocol: openid-connect
        protocolMapper: oidc-audience-mapper
    redirect_uris:
      - https://monitoring.haus.net/oauth2/*
    web_origins:
      - "*"
    validate_certs: no
- name: Deploy proxy resources
  block:
    - name: Create CA cert
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: monitoring-ca
            namespace: linkerd-viz
          spec:
            isCA: true
            commonName: hausnet-ca
            secretName: monitoring-ca
            privateKey: 
              algorithm: ECDSA
              size: 256
            issuerRef:
              name: cluster-issuer
              kind: ClusterIssuer
    - name: Create monitoring issuer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Issuer
          metadata:
            name: monitoring-issuer
            namespace: linkerd-viz
          spec:
            ca:
              secretName: monitoring-ca
    - file: path="terraform/monitoring" state="directory"
    - name: Get vault IP
      shell: "kubectl get svc vault -n vault-system -o jsonpath=\"{.spec.clusterIP}\""
      register: vault_server
    - name: Get vault token
      shell: "kubectl get secrets -n vault-system vault-unseal-keys -o jsonpath={.data.vault-root} | base64 --decode"
      register: vault_token
    - template:
        dest: terraform/monitoring/terraform.tf # required. Location to render the template to on the remote machine.
        src: terraform.tf.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.
    - copy: src=monitoring.tf dest=terraform/monitoring/monitoring.tf
    - stat:
        path: "terraform/monitoring/.terraform"
      register: terraform_initialized
    - shell:
        cmd: terraform init
        chdir: "terraform/monitoring"
      when: terraform_initialized.stat.exists != true
    - shell: cat /proc/sys/kernel/random/uuid | sed 's/-//g'
    # - shell: hexdump -n 16 -e '4/4 "%08X" 1 "\n"' /dev/random
      register: encryption_key
    - name: Plan deployment
      terraform:
        project_path: "terraform/monitoring" # required. The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.
        state: planned # not required. choices: planned;present;absent. Goal state of given stage/project
        plan_file: plan.out
        variables:
          client_id: "monitoring-proxy"
          client_secret: "{{ client_secret.stdout }}"
          encryption_key: "{{ encryption_key.stdout }}"
    - name: Apply deployment
      terraform:
        project_path: "terraform/monitoring" # required. The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.
        state: present # not required. choices: planned;present;absent. Goal state of given stage/project
        plan_file: plan.out
        variables:
          client_id: "monitoring-proxy"
          client_secret: "{{ client_secret.stdout }}"
          encryption_key: "{{ encryption_key.stdout }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/kubeconfig"
    KUBE_CONFIG_PATH: "/home/{{ ansible_user }}/kubeconfig"
- name: Deploy kubernetes resources
  include: deployment.yml
