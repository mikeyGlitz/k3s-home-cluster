---
- name: Create Project folder
  file: path=terraform/files state=directory
- name: Copy files to project folder
  copy: "src={{ item }} dest=terraform/files/{{ item }}"
  with_items:
    - files.tf
    - values.yaml.tpl
- name: Prepare Terraform
  block:
    - name: Get vault IP
      shell: "kubectl get svc vault -n vault-system -o jsonpath=\"{.spec.clusterIP}\""
      register: vault_server
    - name: Get vault token
      shell: "kubectl get secrets -n vault-system vault-unseal-keys -o jsonpath={.data.vault-root} | base64 --decode"
      register: vault_token
    - name: Generate DB password
      shell: cat /proc/sys/kernel/random/uuid | sed 's/-//g'
      register: client_secret
    - name: Create Keycloak client
      community.general.keycloak_client:
        state: present
        auth_client_id: admin-cli
        auth_keycloak_url: "https://auth.{{ domain }}/auth"
        auth_username: "{{ keycloak_user }}"
        auth_password: "{{ keycloak_password }}"
        auth_realm: master
        name: Files Portal
        client_id: files-portal
        client_authenticator_type: client-secret
        secret: "{{ client_secret.stdout }}"
        realm: hausnet
        attributes:
          id.token.signed.response.alg: "RS256"
        protocol_mappers:
          - config:
              included.client.audience: "files-portal"
              id.token.claim: "true"
              access.token.claim: "true"
            name: files-portal-mapper
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
          - name: files-group-mapper
            protocol: "openid-connect"
            protocolMapper: "oidc-group-membership-mapper"
            config: 
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "groups"
              userinfo.token.claim: "true"
              full.path: "false"
          - name: ownCloudQuota
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-property-mapper"
            config:
              userinfo.token.claim: "true"
              user.attribute: "ownCloudQuota"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "ownCloudQuota"
              jsonType.label: "String"
        redirect_uris:
          - https://files.haus.net/*
        web_origins:
          - "*"
        validate_certs: no
    - name: Generate DB password
      shell: cat /proc/sys/kernel/random/uuid | sed 's/-//g'
      register: db_password
    - name: Generate cache password
      shell: cat /proc/sys/kernel/random/uuid | sed 's/-//g'
      register: redis_password
    - debug: msg="{{ redis_password.stdout }}"
    - kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: files
            annotations:
              linkerd.io/inject: enabled
    - name: Create CA cert
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: files-root-ca
            namespace: files
          spec:
            isCA: true
            commonName: hausnet-ca
            secretName: files-ca
            privateKey: 
              algorithm: ECDSA
              size: 256
            issuerRef:
              name: cluster-issuer
              kind: ClusterIssuer
    - name: Create files issuer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Issuer
          metadata:
            name: files-issuer
            namespace: files
          spec:
            ca:
              secretName: files-ca
    - name: Create monitoring
      include: monitoring.yml
    - name: Copy terraform config
      template:
          dest: "terraform/files/terraform.tf" # required. Location to render the template to on the remote machine.
          src: terraform.tf.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.
    - stat:
        path: "terraform/files/.terraform"
      register: terraform_initialized
    - shell:
        cmd: terraform init
        chdir: "terraform/files"
      when: terraform_initialized.stat.exists != true
    - name: Plan deployment
      terraform:
        project_path: "terraform/files" # required. The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.
        state: planned # not required. choices: planned;present;absent. Goal state of given stage/project
        plan_file: plan.out
        variables:
          db_password: "{{ db_password.stdout }}"
          app_user: "{{ files_user }}"
          app_password: "{{ files_password }}"
          redis_password: "{{ redis_password.stdout }}"
          client_secret: "{{ client_secret.stdout }}"
    - name: Apply deployment
      terraform:
        project_path: "terraform/files" # required. The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.
        state: present # not required. choices: planned;present;absent. Goal state of given stage/project
        plan_file: plan.out
        variables:
          db_password: "{{ db_password.stdout }}"
          app_user: "{{ files_user }}"
          app_password: "{{ files_password }}"
          redis_password: "{{ redis_password.stdout }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/kubeconfig"
    KUBE_CONFIG_PATH: "/home/{{ ansible_user }}/kubeconfig"
    